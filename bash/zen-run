#! /usr/bin/env python
# -*- encoding:utf-8 -*-

"""
Usage:
    zen-run reset
    zen-run initialize
    zen-run configure <username> [-s <share> -f <funds> -t <threshold> -e <excludes> -b <block-delay>]
    zen-run configure [-c <currency>]
    zen-run adjust-forge <username> <value>
    zen-run start-tbw
    zen-run stop-tbw
    zen-run launch-payroll <username>
    zen-run resume-payroll <username>

Options:
-b --block-delay=<block-delay> : block amount to wait between payroll
-c --currency=<currency>       : configure the token display on front-end page
-e --excludes=<excludes>       : coma-separated or file address list to exclude from payroll
-f --funds=<funds>             : delegate funds address
-s --share=<share>             : delegate share rate (0.0<=share<=1.0)
-t --threshold=<threshold>     : minimum amount for a payment

Subcommands:
    reset          : initialization starting from ark-core installation
    initialize     : initialization starting from delegates configuration
    configure      : configure options for a given <username>
    start-tbw      : start the true block weight process
    stop-tbw       : stop the true block weight process
    launch-payroll : create a payroll for <username> (true block weight status reseted)
    resume-payroll : resume existing <username> payroll (true block weight status unchanged)
"""

import os
import sys

sys.path.append(os.path.abspath(os.path.expanduser("~/zen")))

import zen
import base58
import docopt
import zen.tbw


def _addresses(value):
	if os.path.exists(value):
		with io.open(value, "r") as data:
			addresses = [addr.strip() for addr in data.read().split("\n").split(",")]
	else:
		addresses = value.split(",")

	result = []
	for address in addresses:
		try: base58.b58decode_check(address)
		except ValueError: pass
		else: result.append(address)

	if not len(result):
		return None
	else:
		return result

FILTER = {
	"--block-delay": lambda value: int(value),
	"--currency":    lambda value: str(value),
	"--excludes":    lambda value: _addresses(value),
	"--funds":       lambda value: _addresses(value),
	"--share":       lambda value: min(1.0, float(value)),
	"--threshold":   lambda value: float(value),
}


def start_tbw(args={}, **options):
	os.system("""
if [ "$(pm2 id zen-tbw) " = "[] " ]; then
	cd %(abspath)s
    pm2 start app.json
else
    pm2 restart zen-tbw
fi
""" % {"abspath": os.path.abspath(os.path.dirname(__file__))}
)


def stop_tbw(args={}, **options):
	os.chdir(os.path.abspath(os.path.dirname(__file__)))
	os.system("""
if [ "$(pm2 id zen-tbw) " != "[] " ]; then
	cd %(abspath)s
    pm2 stop zen-tbw
fi
""" % {"abspath": os.path.abspath(os.path.dirname(__file__))}
)


def reset(args={}, **options):
	os.remove(os.path.join(zen.JSON, "root.json"))
	initialize(args, **options)


def initialize(args={}, **options):
	zen.init()
	zen.tbw.init()


def launch_payroll(args={}, **options):
	username = args["<username>"]
	zen.tbw.extract(username)
	zen.tbw.dumpRegistry(username)
	zen.tbw.broadcast(username)


def resume_payroll(args={}, **options):
	username = args["<username>"]
	zen.tbw.dumpRegistry(username)
	zen.tbw.broadcast(username)


def configure(args={}, **options):
	username = args["<username>"]
	if username:
		zen.tbw.init(username=username, **options)
	else:
		zen.tbw.init(**options)


def adjust_forge(args={}, **options):
	username = args["<username>"]
	zen.tbw.adjust(username, float(args["<value>"]))


if __name__ == "__main__":
	tbw = zen.loadJson("tbw.json")

	def getAction(args):
		for action in [k for k in args if k[0] not in ["-", "<"]]:
			if args[action] == True:
				return action
		return False

	def getOptions(args):
		options = {}
		for option,value in [(k,v) for k,v in args.items() if k.startswith("--") and v != None]:
			options[option[2:].replace("-", "_")] = FILTER[option](value)
		return dict((k,v) for k,v in options.items() if v != None)

	args = docopt.docopt(__doc__, argv=sys.argv[1:])
	action = getAction(args)
	options = getOptions(args)

	if action:
		func = getattr(sys.modules[__name__], action.replace("-", "_"))
		if callable(func):
			func(args, **options)
