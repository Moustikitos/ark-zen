#! /usr/bin/env python
# -*- encoding:utf-8 -*-

"""
Usage:
    zen configure [--chunk-size <chubk-size> --fee-coverage]
    zen add-delegate <username> [-h <webhook-peer>]
    zen configure <username> [-s <share> -w <wallet> -e <excludes> -b <block-delay> -f <fee-level>]
    zen configure <username> [-m <minimum-vote> -M <maximum-vote> -t <threshold>]
    zen (launch-payroll | resume-payroll | retry-payroll | check-applied | remove-delegate) <username>
    zen adjust-forge <username> <value>
    zen set-secrets [<username>]
    zen append-custom-peer <peer-list>
    zen deploy-srv [--ip-address <ip-address> -p <port>]
    zen (restart-srv | stop-srv | log-zen | log-bg)
    zen (reset | initialize | remove-custom-peer | check-secrets | enable-tasks | disable-tasks)
    zen configure-task <task> [-0]

Options:
    -b --block-delay=<block-delay>    block amount to wait beetween payroll
    -e --excludes=<excludes>          coma-separated or file address list to exclude from payroll
    -w --wallet=<wallet>              delegate funds wallet
    -f --fee-level=<fee-level>        set the fee level for the delegate
    -h --webhook-peer=<webhook-peer>  define the webhook peer to use
    -s --share=<share>                delegate share rate (0.0<=share<=1.0)
    -t --threshold=<threshold>        minimum amount for a payment
    -n --name-list=<name-list>        *.tbw coma-separated name list
    -m --minimum-vote=<minimum-vote>  set a minimum vote level
    -M --maximum-vote=<maximum-vote>  set a maximum vote level
    -p --port=<port>                  port to use for zen server
    --ip-address=<ip-address>         ip address to use for zen server
    --chunk-size=<chunk-size>         max transaction per multitransfer
    -0 --reset                        background task options to defaults   (flag)
    --fee-coverage                    delegate covers transaction fees      (flag)

Subcommands:
    reset               initialization starting from ark-core config folder
    initialize          initialization starting from peer selection
    configure           configure global or delegate-specific options
    deploy-srv          deploy services and start the true block weight server tasks
    restart-srv         restart the true block weight server tasks
    stop-srv            stop the true block weight server tasks
    log-zen/bg          log true block weight server or background tasks
    launch-payroll      create a payroll for <username> (true block weight status reseted)
    retry-payroll       retry a specified payroll for <username> (true block weight status unchanged)
    resume-payroll      resume existing <username> payroll (true block weight status unchanged)
    add-delegate        add delegate if bip39 secret protection used
    remove-delegate     remove delegate <username>
    set-secrets         reset delegate secrets
    check-secrets       check registered private keys
    append-custom-peer  append custom peer from coma-separated-peer list or newline-separated-peer file
    remove-custom-peer  remove one or more custom peer from a selection list
    enable-tasks        enable available background tasks
    disable-tasks       disable available background tasks
    configure-task      edit task options if any
"""

import io
import os
import sys
import base58
import docopt

sys.path.append(os.path.abspath(os.path.expanduser("~/ark-zen")))
sys.path.append(os.path.abspath(".."))

import bg
import zen
import zen.tbw
import zen.biom
import zen.task


def _fee(value):
    if value in ["minFee", "avgFee", "maxFee"]:
        return value
    else:
        try:
            return "%d" % int(value)
        except Exception:
            return False


def _split(value):
    if os.path.exists(value):
        with io.open(value, "r") as data:
            lst = [addr.strip() for addr in data.read().split("\n").split(",")]
    else:
        lst = value.split(",")
    return lst


def _addresses(value):
    addresses = _split(value)
    result = []
    for address in addresses:
        try:
            base58.b58decode_check(address)
        except ValueError:
            pass
        else:
            result.append(address)

    if not len(result):
        return None
    else:
        return result


def _ask_task_option(option, value, current=None):
    result = False
    if value is not None and "|" in value:
        typ, value = value.split("|")
        typ = getattr(__builtins__, typ, "str")
        value = typ(value)
    else:
        typ = str

    if current:
        value = current

    while result is False:
        ans = input(
            " > %s%s: " % (option[2:], " [%r]" % value if value else "")
        )
        if ans == "":
            result = None
        elif typ is not str:
            try:
                result = typ(ans)
            except Exception:
                result = False
        else:
            result = ans

    return result


def configure_task(args={}, **options):
    func = getattr(zen.task, args["<task>"], False)
    if callable(func) and func.__doc__ is not None:
        taskname = args["<task>"]
        config = zen.loadJson("root.json")
        task_config = config.get("tasks-enabled", {}).get(taskname, {})
        analyse = docopt.docopt(
            func.__doc__, argv=sys.argv[sys.argv.index(taskname)+1:]
        )
        if args.get("--reset", False):
            for key in [k for k in analyse if k[2:] in task_config]:
                task_config.pop(key[2:], False)
        else:
            analyse.pop("-0", False)
            analyse.pop("--reset", False)
            try:
                for key, value in analyse.items():
                    value = _ask_task_option(
                        key, value, task_config.get(key[2:], None)
                    )
                    if value is not None:
                        task_config[key[2:]] = value
            except KeyboardInterrupt:
                return
        config["tasks-enabled"] = dict(
            config.get("tasks-enabled", {}),
            **{taskname: task_config}
        )
        zen.dumpJson(config, "root.json")
    else:
        zen.logMsg("'%s' unknown or no option available" % args["<task>"])


def set_secrets(args={}, **options):
    if args["<username>"]:
        list = [args["<username>"]]
    else:
        list = [
            n.replace("-webhook.json", "") for n in next(os.walk(zen.JSON))[-1]
            if n.endswith("-webhook.json")
        ]

    for username in list:
        config = zen.loadJson("%s.json" % username)
        wlt = zen.biom.dposlib.rest.GET.api.wallets(username).get("data", {})

        if wlt:
            config["#1"] = zen.biom.askPrivateKey(
                "Enter %s first secret: " % username,
                wlt["publicKey"]
            )
            if config["#1"] is False:
                zen.logMsg("Configuration aborted...")
                return

            secondPublicKey = wlt.get("attributes", {}).get(
                "secondPublicKey", None
            )
            if secondPublicKey is None:
                config["#2"] = None
            else:
                config["#2"] = zen.biom.askPrivateKey(
                    "Enter %s second secret: " % username,
                    secondPublicKey
                )
                if config["#2"] is False:
                    zen.logMsg("Configuration aborted...")
                    return

            zen.dumpJson(config, "%s.json" % username)

        else:
            zen.logMsg(
                "delegate %s not found on %s network" %
                (username, zen.biom.dposlib.rest.cfg.network)
            )


def enable_tasks(args={}, **options):
    tasks = zen.loadJson("root.json").get("tasks-enabled", {})
    for task in zen.chooseMultipleItem(
        "Select task to enable:", *[
            tsk for tsk in zen.task._tasks() if tsk not in tasks
        ]
    ):
        zen.task._enableTask(
            eval(input("interval in second for %s: " % task)),
            task
        )


def disable_tasks(args={}, **options):
    tasks = zen.loadJson("root.json").get("tasks-enabled", {})
    for task in zen.chooseMultipleItem(
        "Select task to disable:", *[
            tsk for tsk in zen.task._tasks() if tsk in tasks
        ]
    ):
        zen.task._disableTask(task)


def check_secrets(args={}, **options):
    zen.biom.send_signal_grep("SIGUSR1", "/bg.py")


def deploy_srv(args={}, **options):
    zen.biom.deploy(
        options.get("ip-address", "127.0.0.1"),
        options.get("port", 5000)
    )
    bg.deploy()


def stop_srv(args={}, **options):
    os.system("sudo systemctl stop zen")
    os.system("sudo systemctl stop bg")


def restart_srv(args={}, **options):
    stop_srv()
    os.system("sudo systemctl start zen")
    os.system("sudo systemctl start bg")


def log_bg(args={}, **options):
    os.system("journalctl -u bg -ef")


def log_zen(args={}, **options):
    os.system("journalctl -u zen -ef")


def reset(args={}, **options):
    zen.biom.setup(clear=True)


def initialize(args={}, **options):
    zen.biom.setup()


def configure(args={}, **options):
    username = args["<username>"]
    if username:
        zen.biom.configure(username=username, **options)
    else:
        zen.biom.configure(**options)


add_delegate = configure


def launch_payroll(args={}, **options):
    set_secrets(args={}, **options)
    username = args["<username>"]
    zen.tbw.extract(username)
    zen.tbw.dumpRegistry(username)
    zen.tbw.broadcast(username)


def resume_payroll(args={}, **options):
    zen.tbw.broadcast(args["<username>"])


def retry_payroll(args={}, **options):
    set_secrets(args={}, **options)
    username = args["<username>"]
    zen.tbw.updateRegistryNonces(username)
    zen.tbw.broadcast(username)


def adjust_forge(args={}, **options):
    zen.tbw.adjust(args["<username>"], float(args["<value>"]))


def remove_delegate(args={}, **options):
    zen.biom.removeDelegate(args["<username>"])


def append_custom_peer(args={}, **options):
    config = zen.loadJson("root.json")
    custom_peers = config.get("custom_peers", [])
    for peer in [
        p for p in _split(args["<peer-list>"]) if p not in custom_peers
    ]:
        nethash = zen.biom.dposlib.rest.GET.api.node.configuration(
            peer=peer, timeout=1
        ).get("data", {}).get("nethash", None)
        if nethash == zen.biom.dposlib.rest.cfg.headers["nethash"]:
            custom_peers.append(peer)
            zen.logMsg("%s added to custom peers" % peer)
        elif nethash is not None:
            zen.logMsg("%s not on same network" % peer)
        else:
            zen.logMsg("%s not reachable" % peer)
    config["custom_peers"] = list(custom_peers)
    zen.dumpJson(config, "root.json")


def remove_custom_peer(args={}, **options):
    config = zen.loadJson("root.json")
    items = zen.chooseMultipleItem(
        "Select peers to remove", *config["custom_peers"]
    )
    if len(items):
        for item in items:
            config["custom_peers"].remove(item)
    zen.dumpJson(config, "root.json")


def check_applied(args={}, **options):
    zen.tbw.checkApplied(args["<username>"])


if __name__ == "__main__":
    tbw = zen.loadJson("root.json")

    FILTER = {
        "--block-delay": lambda value: int(value),
        "--excludes": lambda value: _addresses(value),
        "--wallet": lambda value: _addresses(value)[0],
        "--share": lambda value: min(1.0, float(value)),
        "--threshold": lambda value: float(value),
        "--name-list": lambda value: _split(value),
        "--fee-level": lambda value: _fee(value),
        "--chunk-size": lambda value: int(value),
        "--minimum-vote": lambda value: float(value),
        "--maximum-vote": lambda value: float(value),
        "--port": lambda value: int(value),
    }

    def getAction(args):
        action = False
        for key, value in args.items():
            if key in FILTER and value is not None:
                args[key] = FILTER[key](value)
            elif key[0] not in ["-", "<"] and value:
                action = key
        return action

    def getOptions(args):
        options = {}
        for option, value in [
            (k, v) for k, v in args.items()
            if k.startswith("--") and v is not None
        ]:
            try:
                options[option[2:].replace("-", "_")] = value
            except Exception as error:
                zen.logMsg(
                    "error in command line\n\t%s=%s : %s" %
                    (option, value, error)
                )
                sys.exit(1)
        return dict(
            (k, v) for k, v in options.items() if v not in [None, False]
        )

    args = docopt.docopt(__doc__, argv=sys.argv[1:])
    action = getAction(args)
    options = getOptions(args)

    if action:
        func = getattr(sys.modules[__name__], action.replace("-", "_"))
        if callable(func):
            func(args, **options)
