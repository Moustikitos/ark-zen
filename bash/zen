#! /usr/bin/env python
# -*- encoding:utf-8 -*-

"""
Usage:
    zen (reset | initialize | backup-data | remove-custom-peer)
    zen (deploy-srv | restart-srv | stop-srv | log-zen | log-bg)
    zen configure [--max-per-sender <max-per-sender> --chunk-size <chubk-size> --fee-coverage]
    zen configure <username> [-s <share> -w <wallet> -e <excludes> -b <block-delay> -f <fee-level>]
    zen configure <username> [-m <minimum-vote> -M <maximum-vote> -t <threshold>]
    zen add-delegate <username> [-h <webhook-peer>]
    zen (launch-payroll | resume-payroll | retry-payroll | check-applied) <username>
    zen adjust-forge <username> <value>
    zen remove-delegate [<username>]
    zen secrets [<username>]
    zen append-custom-peer <peer-list>
    zen remove-custom-peer

Options:
    -b --block-delay=<block-delay>    : block amount to wait beetween payroll
    -e --excludes=<excludes>          : coma-separated or file address list to exclude from payroll
    -w --wallet=<wallet>              : delegate funds wallet
    -f --fee-level=<fee-level>        : set the fee level for the delegate
    -h --webhook-peer=<webhook-peer>  : define the webhook peer to use
    -s --share=<share>                : delegate share rate (0.0<=share<=1.0)
    -t --threshold=<threshold>        : minimum amount for a payment
    -n --name-list=<name-list>        : *.tbw coma-separated name list
    -m --minimum-vote=<minimum-vote>  : set a minimum vote level
    -M --maximum-vote=<maximum-vote>  : set a maximum vote level
    --max-per-sender=<max-per-sender> : max transaction not considered as spam attack [default:300]
    --chunk-size=<chunk-size>         : max transaction per request [default:30]
    --fee-coverage                    : delegate covers transaction fees (flag)

Subcommands:
    reset              : initialization starting from ark-core config folder
    initialize         : initialization starting from peer selection
    configure          : configure global or delegate-specific options
    deploy-srv         : deploy services and start the true block weight server tasks
    restart-srv        : restart the true block weight server tasks
    stop-srv           : stop the true block weight server tasks
    log-zen/bg         : log true block weight server or background tasks
    backup-data        : store delegate public data in a data-bkp.tar.bz2
    launch-payroll     : create a payroll for <username> (true block weight status reseted)
    retry-payroll      : retry a specified payroll for <username> (true block weight status unchanged)
    resume-payroll     : resume existing <username> payroll (true block weight status unchanged)
    add-delegate       : add delegate if bip39 secret protection used
    remove-delegate    : remove delegate from list or specified by <username>
    zen secrets        : reset delegate secrets
    append-custom-peer : append custom peer from coma-separated-peer list or newline-separated-peer file
    remove-custom-peer : remove one or more custom peer from a selection list
"""

#    zen (reset | initialize | snap-blockchain | backup-data | rebuild | remove-custom-peer)
#    rebuild            : rebuild database from snapshots
#    snap-blockchain    : update snapshot or create it if no snapshot initialized yet


import io
import os
import sys
import base58
import docopt

sys.path.append(os.path.abspath(os.path.expanduser("~/ark-zen")))
sys.path.append(os.path.abspath(".."))

import bg
import zen
import zen.tbw
import zen.biom


def _fee(value):
    if value in ["minFee", "avgFee", "maxFee"]:
        return value
    else:
        try:
            return int(value)
        except Exception:
            return False


def _split(value):
    if os.path.exists(value):
        with io.open(value, "r") as data:
            lst = [addr.strip() for addr in data.read().split("\n").split(",")]
    else:
        lst = value.split(",")
    return lst


def _addresses(value):
    addresses = _split(value)
    result = []
    for address in addresses:
        try:
            base58.b58decode_check(address)
        except ValueError:
            pass
        else:
            result.append(address)

    if not len(result):
        return None
    else:
        return result


def secrets(args={}, **options):
    if args["<username>"]:
        list = [args["<username>"]]
    else:
        list = [
            n.replace("-webhook.json", "") for n in next(os.walk(zen.JSON))[-1]
            if n.endswith("-webhook.json")
        ]

    for username in list:
        config = zen.loadJson("%s.json" % username)
        wlt = zen.biom.dposlib.rest.GET.api.wallets(username).get("data", {})

        if wlt:
            config["#1"] = zen.biom.askPrivateKey(
                "Enter %s first secret: " % username,
                wlt["publicKey"]
            )

            secondPublicKey = wlt.get("attributes", {}).get(
                "secondPublicKey", None
            )
            if secondPublicKey is None:
                config["#2"] = None
            else:
                config["#2"] = zen.biom.askPrivateKey(
                    "Enter %s second secret: " % username,
                    secondPublicKey
                )

            if any([config.get("#1", False), config.get("#2", False)]):
                zen.dumpJson(config, "%s.json" % username)


def deploy_srv(args={}, **options):
    zen.biom.deploy(
        options.get("host", "0.0.0.0"),
        options.get("port", 5000)
    )
    bg.deploy()


def stop_srv(args={}, **options):
    os.system("sudo systemctl stop zen")
    os.system("sudo systemctl stop bg")


def restart_srv(args={}, **options):
    stop_srv()
    os.system("sudo systemctl start zen")
    os.system("sudo systemctl start bg")


def log_bg(args={}, **options):
    os.system("sudo journalctl -u bg -ef")


def log_zen(args={}, **options):
    os.system("sudo journalctl -u zen -ef")


def reset(args={}, **options):
    zen.biom.setup(clear=True)


def initialize(args={}, **options):
    zen.biom.setup()
    restart_srv()


def configure(args={}, **options):
    username = args["<username>"]
    if username:
        zen.biom.configure(username=username, **options)
    else:
        zen.biom.configure(**options)


add_delegate = configure


def backup_data(args={}, **options):
    os.system('''
cd %(path)s
tar -cjf data-bkp.tar.bz2 *.db app/.tbw app/.data
''' % {"path": os.path.abspath(zen.__path__[0])}
    )


def launch_payroll(args={}, **options):
    secrets(args={}, **options)
    username = args["<username>"]
    zen.tbw.extract(username)
    zen.tbw.dumpRegistry(username)
    zen.tbw.broadcast(username)


def resume_payroll(args={}, **options):
    secrets(args={}, **options)
    username = args["<username>"]
    zen.tbw.dumpRegistry(username)
    zen.tbw.broadcast(username)


def retry_payroll(args={}, **options):
    secrets(args={}, **options)
    username = args["<username>"]
    zen.tbw.updateRegistryNonces(username)
    zen.tbw.broadcast(username)


def adjust_forge(args={}, **options):
    username = args["<username>"]
    zen.tbw.adjust(username, float(args["<value>"]))


def remove_delegate(args={}, **options):
    username = args["<username>"]
    zen.biom.removeDelegate(username)


def append_custom_peer(args={}, **options):
    tbw = zen.loadJson("tbw.json")
    custom_peers = tbw.get("custom_peers", [])
    custom_peers.extend(_split(args["<peer-list>"]))
    tbw["custom_peers"] = custom_peers
    zen.dumpJson(tbw, "tbw.json")


def remove_custom_peer(args={}, **options):
    tbw = zen.loadJson("tbw.json")
    items = zen.chooseMultipleItem(
        "> select peers to remove", *tbw["custom_peers"]
    )
    if len(items):
        for item in items:
            tbw["custom_peers"].remove(item)
    zen.dumpJson(tbw, "tbw.json")


def check_applied(args={}, **options):
    zen.tbw.checkApplied(args["<username>"])


if __name__ == "__main__":
    tbw = zen.loadJson("tbw.json")

    FILTER = {
        "--block-delay": lambda value: int(value),
        "--excludes": lambda value: _addresses(value),
        "--wallet": lambda value: _addresses(value)[0],
        "--share": lambda value: min(1.0, float(value)),
        "--threshold": lambda value: float(value),
        "--name-list": lambda value: _split(value),
        "--fee-level": lambda value: _fee(value),
        "--chunk-size": lambda value: int(value),
        "--minimum-vote": lambda value: int(value),
        "--maximum-vote": lambda value: int(value),
    }

    def getAction(args):
        for action in [k for k in args if k[0] not in ["-", "<"]]:
            if args[action] is True:
                return action
        return False

    def getOptions(args):
        options = {}
        for option, value in [
            (k, v) for k, v in args.items()
            if k.startswith("--") and v is not None
        ]:
            try:
                options[option[2:].replace("-", "_")] = FILTER.get(
                    option, lambda v: v
                )(value)
            except Exception as error:
                zen.logMsg(
                    "error in command line\n\t%s=%s : %s" %
                    (option, value, error)
                )
                sys.exit(1)
        return dict(
            (k, v) for k, v in options.items() if v not in [None, False]
        )

    args = docopt.docopt(__doc__, argv=sys.argv[1:])
    action = getAction(args)
    options = getOptions(args)

    if action:
        func = getattr(sys.modules[__name__], action.replace("-", "_"))
        if callable(func):
            func(args, **options)
