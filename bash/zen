#! /usr/bin/env python
# -*- encoding:utf-8 -*-

"""
Usage:
    zen reset
    zen initialize
    zen (configure | add-delegate) <username> [-s <share> -w <wallet> -t <threshold> -e <excludes> -b <block-delay> -f <fee-level> -h <webhook-peer>]
    zen configure [-c <currency>]
    zen adjust-forge <username> <value>
    zen start-tbw
    zen stop-tbw
    zen launch-payroll <username>
    zen retry-payroll <username> -n <name-list>
    zen resume-payroll <username>
    zen remove-delegate [<username>]

Options:
-b --block-delay=<block-delay>   : block amount to wait between payroll
-c --currency=<currency>         : configure the token display on front-end page
-e --excludes=<excludes>         : coma-separated or file address list to exclude from payroll
-w --wallet=<wallet>             : delegate funds wallet
-f --fee-level=<fee-level>       : set the fee level for the delegate
-h --webhook-peer=<webhook-peer> : define the webhook peer to use
-s --share=<share>               : delegate share rate (0.0<=share<=1.0)
-t --threshold=<threshold>       : minimum amount for a payment
-n --name-list=<name-list>       : *.tbw name list

Subcommands:
    reset           : initialization starting from ark-core installation
    initialize      : initialization starting from delegates configuration
    configure       : configure options for a given <username>
    start-tbw       : start the true block weight process
    stop-tbw        : stop the true block weight process
    launch-payroll  : create a payroll for <username> (true block weight status reseted)
    retry-payroll   : retry a specified payroll for <username> (true block weight status unchanged)
    resume-payroll  : resume existing <username> payroll (true block weight status unchanged)
    add-delegate    : add <username> delegate not registered on ark-core-forger
    remove-delegate : remove delegate from list or specified by <username>
"""
# REBUILD
# dropdb ark_devnet
# createdb ark_devnet
# wget https://dsnapshots.ark.io/devnet-v2
# pg_restore -O -j 8 -d ark_devnet devnet-v2  

import os
import sys

sys.path.append(os.path.abspath(os.path.expanduser("~/ark-zen")))

import zen
import base58
import docopt
import zen.tbw

from dposlib import rest

def _fee(value):
	if value in ["minFee", "avgFee", "maxFee"]:
		return value
	else:
		try: return int(value)
		except: return None
	return None


def _split(value):
	if os.path.exists(value):
		with io.open(value, "r") as data:
			lst = [addr.strip() for addr in data.read().split("\n").split(",")]
	else:
		lst = value.split(",")
	return lst


def _addresses(value):
	addresses = _split(value)
	result = []
	for address in addresses:
		try: base58.b58decode_check(address)
		except ValueError: pass
		else: result.append(address)

	if not len(result):
		return None
	else:
		return result


def start_tbw(args={}, **options):
	os.system('''
if [ "$(pm2 id zen-tbw) " = "[] " ]; then
	cd %(abspath)s
    pm2 start app.json
else
    pm2 restart zen-tbw
fi
''' % {"abspath": os.path.dirname(zen.__path__[0])}
)


def stop_tbw(args={}, **options):
	os.system('''
if [ "$(pm2 id zen-tbw) " != "[] " ]; then
	cd %(abspath)s
    pm2 stop zen-tbw
fi
''' % {"abspath": os.path.dirname(zen.__path__[0])}
)


def reset(args={}, **options):
	if os.path.exists(os.path.join(zen.JSON, "root.json")):
		os.remove(os.path.join(zen.JSON, "root.json"))
	initialize(args, **options)


def initialize(args={}, **options):
	zen.init()
	zen.tbw.init()


def add_delegate(args={}, **options):
	username = args["<username>"]
	if username:
		zen.tbw.init(usernames=[username], **options)


def launch_payroll(args={}, **options):
	username = args["<username>"]
	zen.tbw.extract(username)
	zen.tbw.dumpRegistry(username)
	zen.tbw.broadcast(username)


def resume_payroll(args={}, **options):
	username = args["<username>"]
	zen.tbw.dumpRegistry(username)
	zen.tbw.broadcast(username)


def retry_payroll(args={}, **options):
	username = args["<username>"]
	folder = os.path.join(zen.ROOT, "app", ".tbw", username)
	for path in [
		os.path.join(zen.ROOT, "app", ".tbw", username, "history", "%s.tbw" % name) \
		for name in options["name_list"]
	]: os.system('mv "%s" "%s"' % (path, folder))
	zen.tbw.dumpRegistry(username)
	zen.tbw.broadcast(username)


def remove_delegate(args={}, **options):
	root = zen.loadJson("root.json")
	username = args["<username>"]

	if not username:
		webhooks = [name for name in os.listdir(os.path.join(zen.JSON)) if name.endswith("-webhook.json")]
		usernames = [name.split("-")[0] for name in webhooks]
		username = zen.chooseItem("Select listener to destroy:", *[u for u in usernames if u])
		if not username:
			return

	webhook_path = os.path.join(zen.JSON, "%s-webhook.json" % username)
	webhook = zen.loadJson(webhook_path)
	w_id = webhook.get("id", False)
	if w_id:
		rest.DELETE.api.webhooks("%s"%webhook["id"], peer=webhook["peer"])
		os.remove(webhook_path)
		zen.logMsg("%s webhook destroyed" % username)
	else:
		zen.logMsg("%s webhook not found" % username)

	username_path = os.path.join(zen.JSON, "%s.json" % username)
	delegate = zen.loadJson(username_path)
	if len(delegate):
		os.remove(username_path)
		zen.logMsg("%s destroyed" % username)
	else:
		zen.logMsg("%s not found" % username)


def configure(args={}, **options):
	username = args["<username>"]
	if username:
		zen.tbw.init(username=username, **options)
	else:
		zen.tbw.init(**options)


def adjust_forge(args={}, **options):
	username = args["<username>"]
	zen.tbw.adjust(username, float(args["<value>"]))


if __name__ == "__main__":
	tbw = zen.loadJson("tbw.json")

	FILTER = {
		"--block-delay": lambda value: int(value),
		"--currency":    lambda value: str(value),
		"--excludes":    lambda value: _addresses(value),
		"--wallet":      lambda value: _addresses(value)[0],
		"--share":       lambda value: min(1.0, float(value)),
		"--threshold":   lambda value: float(value),
		"--name-list":   lambda value: _split(value),
		"--fee-level":   lambda value: _fee(value),
	}

	def getAction(args):
		for action in [k for k in args if k[0] not in ["-", "<"]]:
			if args[action] == True:
				return action
		return False

	def getOptions(args):
		options = {}
		for option,value in [(k,v) for k,v in args.items() if k.startswith("--") and v != None]:
			try:
				options[option[2:].replace("-", "_")] = FILTER[option](value)
			except Exception as error:
				zen.logMsg("error in command line\n\t%s=%s : %s" % (option, value, error))
				sys.exit(1)
		return dict((k,v) for k,v in options.items() if v != None)

	args = docopt.docopt(__doc__, argv=sys.argv[1:])
	action = getAction(args)
	options = getOptions(args)

	if action:
		func = getattr(sys.modules[__name__], action.replace("-", "_"))
		if callable(func):
			func(args, **options)
